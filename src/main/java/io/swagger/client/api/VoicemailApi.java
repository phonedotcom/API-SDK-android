/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.ListVoicemail;
import io.swagger.client.model.PatchVoicemailParams;
import io.swagger.client.model.VoicemailFull;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class VoicemailApi {
  String basePath = "https://api.phone.com/v4";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * This service shows the details of an individual voicemail.
  * This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
   * @param accountId Account ID
   * @param voicemailId Voicemail ID
   * @return VoicemailFull
  */
  public VoicemailFull getAccountVoicemail (Integer accountId, String voicemailId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getAccountVoicemail"));
    }
    // verify the required parameter 'voicemailId' is set
    if (voicemailId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailId' when calling getAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'voicemailId' when calling getAccountVoicemail"));
    }

    // create path and map variables
    String path = "/accounts/{account_id}/voicemail/{voicemail_id}".replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "voicemail_id" + "\\}", apiInvoker.escapeString(voicemailId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VoicemailFull) ApiInvoker.deserialize(localVarResponse, "", VoicemailFull.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This service shows the details of an individual voicemail.
   * This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
   * @param accountId Account ID   * @param voicemailId Voicemail ID
  */
  public void getAccountVoicemail (Integer accountId, String voicemailId, final Response.Listener<VoicemailFull> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getAccountVoicemail"));
    }
    // verify the required parameter 'voicemailId' is set
    if (voicemailId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailId' when calling getAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'voicemailId' when calling getAccountVoicemail"));
    }

    // create path and map variables
    String path = "/accounts/{account_id}/voicemail/{voicemail_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "voicemail_id" + "\\}", apiInvoker.escapeString(voicemailId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VoicemailFull) ApiInvoker.deserialize(localVarResponse,  "", VoicemailFull.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a list of voicemail messages for an account.
  * Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
   * @param accountId Account ID
   * @param filtersId ID filter
   * @param filtersFrom Caller ID filter
   * @param filtersTo Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B
   * @param filtersIsNew 
   * @param filtersCreatedAt Date string representing the UTC time that sms was created
   * @param filtersExtension Extension filter
   * @param sortId ID sorting
   * @param sortCreatedAt Sort by the UTC time that voicemail was created
   * @param limit Max results
   * @param offset Results to skip
   * @param fields Field set
   * @return ListVoicemail
  */
  public ListVoicemail listAccountVoicemail (Integer accountId, List<String> filtersId, String filtersFrom, String filtersTo, Boolean filtersIsNew, String filtersCreatedAt, List<String> filtersExtension, String sortId, String sortCreatedAt, Integer limit, Integer offset, String fields) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling listAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'accountId' when calling listAccountVoicemail"));
    }

    // create path and map variables
    String path = "/accounts/{account_id}/voicemail".replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[id]", filtersId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[from]", filtersFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[to]", filtersTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[is_new]", filtersIsNew));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[created_at]", filtersCreatedAt));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[extension]", filtersExtension));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[id]", sortId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[created_at]", sortCreatedAt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fields", fields));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ListVoicemail) ApiInvoker.deserialize(localVarResponse, "", ListVoicemail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a list of voicemail messages for an account.
   * Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
   * @param accountId Account ID   * @param filtersId ID filter   * @param filtersFrom Caller ID filter   * @param filtersTo Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B   * @param filtersIsNew    * @param filtersCreatedAt Date string representing the UTC time that sms was created   * @param filtersExtension Extension filter   * @param sortId ID sorting   * @param sortCreatedAt Sort by the UTC time that voicemail was created   * @param limit Max results   * @param offset Results to skip   * @param fields Field set
  */
  public void listAccountVoicemail (Integer accountId, List<String> filtersId, String filtersFrom, String filtersTo, Boolean filtersIsNew, String filtersCreatedAt, List<String> filtersExtension, String sortId, String sortCreatedAt, Integer limit, Integer offset, String fields, final Response.Listener<ListVoicemail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling listAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'accountId' when calling listAccountVoicemail"));
    }

    // create path and map variables
    String path = "/accounts/{account_id}/voicemail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[id]", filtersId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[from]", filtersFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[to]", filtersTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[is_new]", filtersIsNew));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filters[created_at]", filtersCreatedAt));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[extension]", filtersExtension));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[id]", sortId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[created_at]", sortCreatedAt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fields", fields));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListVoicemail) ApiInvoker.deserialize(localVarResponse,  "", ListVoicemail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the is_new parameter in a voicemail record.
  * Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
   * @param accountId Account ID
   * @param voicemailId Voicemail ID
   * @param data Payment data
   * @return VoicemailFull
  */
  public VoicemailFull patchAccountVoicemail (Integer accountId, String voicemailId, PatchVoicemailParams data) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = data;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling patchAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'accountId' when calling patchAccountVoicemail"));
    }
    // verify the required parameter 'voicemailId' is set
    if (voicemailId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailId' when calling patchAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'voicemailId' when calling patchAccountVoicemail"));
    }

    // create path and map variables
    String path = "/accounts/{account_id}/voicemail/{voicemail_id}".replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "voicemail_id" + "\\}", apiInvoker.escapeString(voicemailId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VoicemailFull) ApiInvoker.deserialize(localVarResponse, "", VoicemailFull.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the is_new parameter in a voicemail record.
   * Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
   * @param accountId Account ID   * @param voicemailId Voicemail ID   * @param data Payment data
  */
  public void patchAccountVoicemail (Integer accountId, String voicemailId, PatchVoicemailParams data, final Response.Listener<VoicemailFull> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = data;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling patchAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'accountId' when calling patchAccountVoicemail"));
    }
    // verify the required parameter 'voicemailId' is set
    if (voicemailId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailId' when calling patchAccountVoicemail",
        new ApiException(400, "Missing the required parameter 'voicemailId' when calling patchAccountVoicemail"));
    }

    // create path and map variables
    String path = "/accounts/{account_id}/voicemail/{voicemail_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "voicemail_id" + "\\}", apiInvoker.escapeString(voicemailId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VoicemailFull) ApiInvoker.deserialize(localVarResponse,  "", VoicemailFull.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
